import pandas as pd
import numpy as np
import nltk
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import CountVectorizer

# Download stopwords
nltk.download('stopwords')

# Read in data
data1 = pd.read_csv("NLP_train.csv",encoding='latin1')
data2 = pd.read_csv("NLP_test.csv",encoding='latin1')
df = pd.concat([data1, data2])

# Clean Data
df = df.drop(['UserName', 'ScreenName', 'Location', 'TweetAt'], axis=1)
df = df.reset_index(drop=True)

# Check for missing values in OriginalTweet column
print(df['OriginalTweet'].isna().sum())

# Preprocessing
corpus = []
ps = PorterStemmer()
for i in range(0, 44955):
    review = re.sub('[^a-zA-Z]', ' ', df['OriginalTweet'][i])
    review = review.lower()
    review = review.split()
    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]
    review = ' '.join(review)
    corpus.append(review)

# Initialize CountVectorizer
cv = CountVectorizer(max_features=5000) 

# Generate feature matrix and target variable
X = cv.fit_transform(corpus).toarray()
y = df.iloc[:, -1].values

# ------------------------------------------------------------------------- #
# ---------------------------- DECISION TREE ------------------------------ #
# ------------------------------------------------------------------------- #

from sklearn.tree import DecisionTreeClassifier

classifier = DecisionTreeClassifier()

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=0)

classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)

print("\n################### TEST #1 ######################")
print("################### DECISION TREE ######################\n")

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test,y_pred)

print(cm)

from sklearn.metrics import accuracy_score

print(f"\Accuracy score: {accuracy_score(y_test,y_pred)}")

# ------------------------------------------------------------------------- #
# --------------------------------- KNN ----------------------------------- #
# ------------------------------------------------------------------------- #

from sklearn.neighbors import KNeighborsClassifier

classifier = KNeighborsClassifier(n_neighbors=5)

classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)

print("\n################### TEST #3 ######################")
print("################### KNN ######################\n")

print(cm)

print(f"\nAccuracy score: {accuracy_score(y_test,y_pred)}")

# ------------------------------------------------------------------------- #
# ---------------------------- RANDOM FOREST ------------------------------ #
# ------------------------------------------------------------------------- #

from sklearn.ensemble import RandomForestClassifier

classifier = RandomForestClassifier(n_estimators=5)

classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)

print("\n################### TEST #5 ######################")
print("################### RANDOM FOREST ######################\n")

print(cm)

print(f"\nAccuracy score: {accuracy_score(y_test,y_pred)}")

# ------------------------------------------------------------------------- #
# ------------------------- LOGISTIC REGRESSION --------------------------- #
# ------------------------------------------------------------------------- #



from sklearn.linear_model import LogisticRegression

classifier = LogisticRegression()

classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)

print("\n################### TEST #2 ######################")
print("################### LOGISTIC REGRESSION ######################\n")

print(cm)

print(f"\nAccuracy score: {accuracy_score(y_test,y_pred)}")

# ------------------------------------------------------------------------- #
# ----------------------------- NAIVE BAYES ------------------------------- #
# ------------------------------------------------------------------------- #



from sklearn.naive_bayes import GaussianNB

classifier = GaussianNB()

classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)

print("\n################### TEST #4 ######################")
print("################### NAIVE BAYES ######################\n")

print(cm)

print(f"\nAccuracy score: {accuracy_score(y_test,y_pred)}")

# ------------------------------------------------------------------------- #
# ------------------------------- SVC RBF --------------------------------- #
# ------------------------------------------------------------------------- #



from sklearn.svm import SVC

classifier = SVC()

classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)

print("\n################### TEST #6 ######################")
print("################### SVC RBF ######################\n")

print(cm)

print(f"\nAccuracy score: {accuracy_score(y_test,y_pred)}")



# ------------------------------------------------------------------------- #
# ----------------------------- SVC LINEAR -------------------------------- #
# ------------------------------------------------------------------------- #



classifier = SVC(kernel='linear')

classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)

print("\n################### TEST #7 ######################")
print("################### SVC LINEAR ######################\n")

print(cm)

print(f"\nAccuracy score: {accuracy_score(y_test,y_pred)}")



# ------------------------------------------------------------------------- #
# ------------------------------- SVC POLY -------------------------------- #
# ------------------------------------------------------------------------- #



classifier = SVC(kernel='poly')

classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)

print("\n################### TEST #8 ######################")
print("################### SVC POLY ######################\n")

print(cm)

print(f"\nAccuracy score: {accuracy_score(y_test,y_pred)}")



# ------------------------------------------------------------------------- #
# ----------------------------- SVC SIGMOID ------------------------------- #
# ------------------------------------------------------------------------- #



classifier = SVC(kernel='sigmoid')

classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)

print("\n################### TEST #9 ######################")
print("################### SVC SIGMOID ######################\n")

print(cm)

print(f"\nAccuracy score: {accuracy_score(y_test,y_pred)}")


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Accuracy %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

################### TEST #1 ######################
################### DECISION TREE ######################

[[ 656   67  527  115  205]
 [  42  849  147   69  652]
 [ 371  172 1319  331  552]
 [  69   59  306 1391  280]
 [ 139  497  525  306 1593]]
Accuracy score: 0.5167719548002492

################### TEST #3 ######################
################### KNN ######################

[[ 656   67  527  115  205]
 [  42  849  147   69  652]
 [ 371  172 1319  331  552]
 [  69   59  306 1391  280]
 [ 139  497  525  306 1593]]

Accuracy score: 0.27030874632974466

################### TEST #5 ######################
################### RANDOM FOREST ######################

[[ 656   67  527  115  205]
 [  42  849  147   69  652]
 [ 371  172 1319  331  552]
 [  69   59  306 1391  280]
 [ 139  497  525  306 1593]]

Accuracy score: 0.4813595515615268


################### TEST #2 ######################
################### LOGISTIC REGRESSION ######################

[[ 656   67  527  115  205]
 [  42  849  147   69  652]
 [ 371  172 1319  331  552]
 [  69   59  306 1391  280]
 [ 139  497  525  306 1593]]

Accuracy score: 0.62149657442833

################### TEST #4 ######################
################### NAIVE BAYES ######################

[[ 656   67  527  115  205]
 [  42  849  147   69  652]
 [ 371  172 1319  331  552]
 [  69   59  306 1391  280]
 [ 139  497  525  306 1593]]

Accuracy score: 0.36319957291573984